blueprint:
  name: UniFi Protect Motion / Smart Detection Notifications
  domain: automation
  source_url: https://raw.githubusercontent.com/AngellusMortis/unifiprotect_blueprints/main/blueprints/automation/unifiprotect/notification_smart_motion_event.yaml
  description: |
    ## UniFi Protect Motion / Smart Detection Notifications

    This blueprint will send push notifications to a maxtrix notification channel set up in Home Assistant app when a camera detections motion or a
    smart detection.

    ### Required Settings

      - UniFi Protect Detection Sensor

    ### Optional Settings

      - Notification target for the [mobile app notification target][1].
      - Time formatting strings. Timestamp is injected into the notification in case the notification is delay.
      - Cooldown before sending another notification
      - Silence timer for muting notifications via Actionable Notification (docs: [Mobile][2])
      - Configurable lovelace view from notification

    ### Requirements

    To take full effect of this automation blueprint, your Home Assistant instance needs some setup beforehand.

    - An UniFi Protect camera. Only cameras that are capable of smart detections (G4, AI or G5 Series cameras) will have objection detection sensors.
    - A valid HTTPS certificate and [properly configured external URL][3]
      - If you are using Home Assistant Cloud, this is already set up for you.
      - If this is not setup correctly, the actionable notifications and attachments will not appear in the notifications.
      - You do not need your _whole_ Home Assistant to be publicly accessible. Only the paths `/api/unifiprotect/*` and
        `/api/webhook/*` need to be accessible outside of your network.

    [1]: https://companion.home-assistant.io/docs/notifications/notifications-basic#sending-notifications-to-multiple-devices
    [2]: https://companion.home-assistant.io/docs/notifications/actionable-notifications/
    [3]: https://www.home-assistant.io/docs/configuration/remote/

    ### ADAPTED FROM https://github.com/AngellusMortis/unifiprotect_blueprints
  input:
    obj_sensor:
      name: Detection Sensor
      description: >
        The "Motion/Person/etc. Detected" sensor(s) to use.
      selector:
        entity:
          integration: unifiprotect
          domain: binary_sensor
          multiple: true
    presence_filter:
      name: (Optional) Presence Filter
      description: Only notify if selected presence entity is not "home".
      default: ""
      selector:
        entity:
          domain: device_tracker
          multiple: true
    notify_target_app:
      name: (Optional) Notification Target (Mobile App)
      description: >
        The notification target for mobile apps notifications. Can be `notifiy.notify` or any Mobile app notify service
        (starts with `notify.mobile_app_`).
        https://companion.home-assistant.io/docs/notifications/notifications-basic#sending-notifications-to-multiple-devices
      default: "notify.matrix"
      selector:
        text:
    channel:
      name: (Optional) Notification Channel
      description: >
        Notification channel/tag to use. Will automatically be prepended with
        "Manual " if action is triggered manually.
        https://companion.home-assistant.io/docs/notifications/notifications-basic#notification-channels
      default: Smart Detection
      selector:
        text:
    time_format:
      name: (Optional) Time Format String
      description: >
        Python datetime format code string for the event trigger time. This string is
        the actual time the doorbell event was triggered in case the automation or
        notification is delayed. Manual triggers will cause this to always be the time
        of the previous event.
        https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes
      default: "%I:%M %p"
      selector:
        entity:

    cooldown:
      name: (Optional) Cooldown
      description: >
        Delay before sending another notification for this camera after the last event.
        Is also the interval you have to respond to actions in notification.
      default: 60
      selector:
        number:
          max: 300
          min: 0
          unit_of_measurement: seconds
    silence_timer:
      name: (Optional) Silence Notifications
      description: >
        How long to silence notifications for this camera when requested as part of the
        actionable notification. The time interval you have to respond to the slient
        action is controlled by "Cooldown". Short Cooldown timers may prevent you from
        silencing.
      default: 30
      selector:
        number:
          max: 300
          min: 0
          unit_of_measurement: minutes
    lovelace_view:
      name: (Optional) Lovelace View
      description: |
        Home Assistant Lovelace view to open when clicking notification.
        If left blank, URI Notification actions will not be generated.
      default: ""
      selector:
        text:
    debug_event_id:
      name: (Optional) Debug Event ID
      description: >
        Debug Event ID for UniFi Protect to use for when manually triggering automation.
        Will be used to generate a thumbnail for testing notifications.
      default: ""
      selector:
        text:

mode: single
max_exceeded: silent

variables:
  # input vars
  input_obj: !input obj_sensor
  input_channel: !input channel
  input_lovelace_view: !input lovelace_view
  input_notify_target_app: !input notify_target_app
  input_silence_timer: !input silence_timer
  input_time_format: !input time_format
  input_presence_filter: !input presence_filter
  input_debug_event_id: !input debug_event_id
  input_cooldown: !input cooldown
  lovelace_view: "{{ input_lovelace_view | trim }}"
  is_manual: "{{ 'from_state' not in trigger }}"
  entity_id: "{% if is_manual %}{{ input_obj[0] }}{% else %}{{ trigger.entity_id }}{% endif %}"
  entity_name: "{{ state_attr(entity_id, 'friendly_name') }}"
  device_id: "{{ device_id(entity_id) }}"
  camera_entities: '[{% for eid in device_entities(device_id) %}{%if eid.startswith(''camera'') and not ''package'' in eid and not is_state(eid, ''unavailable'') %}"{{ eid }}",{% endif %}{% endfor %}]'
  camera_entity_id: "{{ camera_entities | default([None]) | first }}"
  event_id: "{% if is_manual %}{{ input_debug_event_id }}{% else %}{{ state_attr(entity_id, 'event_id') }}{% endif %}"
  video_start: "{{ states[entity_id].last_changed.isoformat() }}"
  trigger_time: |
    {% if states[entity_id] == None %}
      None
    {% else %}
      {{ as_local(states[entity_id].last_changed).strftime(input_time_format) }}
    {% endif %}
  notification_channel: |
    {% if is_manual %}
      Manual {{ input_channel }}
    {% else %}
      {{ input_channel }}
    {% endif %}
  notification_title: "{{ entity_name }}"
  notification_tag: "{{ notification_channel.lower().replace(' ', '-') }}"
  notification_message: "{{ entity_name }}{% if trigger_time != None %} at {{ trigger_time }}{% endif %}."
  notification_image: "/api/unifiprotect/thumbnail/{{ config_entry_id(entity_id) }}/{{ event_id }}"
  notification_url: |
    {% if lovelace_view == "" %}
      None
    {% else %}
      {{ lovelace_view }}
    {% endif %}
  silence_action: "silence-smart-{{ entity_id }}"

trigger:
  - platform: state
    entity_id: !input obj_sensor
    from: "off"
    to: "on"

condition:
  - "{{ not input_presence_filter or (input_presence_filter | select('is_state', 'home') | list | count) == 0 }}"

action:
  - service: "{{ input_notify_target_app }}"
    data:
      message: "{{ notification_message }}"
      data:
        images:
          - "{{ notification_image }}"
